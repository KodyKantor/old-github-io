<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on a bird in the hand</title>
    <link>https://kodykantor.github.io/post/index.xml</link>
    <description>Recent content in Posts on a bird in the hand</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 17 Jan 2017 15:46:05 -0600</lastBuildDate>
    <atom:link href="https://kodykantor.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>dockerbox - the virtual container filesystem</title>
      <link>https://kodykantor.github.io/post/dockerbox/</link>
      <pubDate>Tue, 17 Jan 2017 15:46:05 -0600</pubDate>
      
      <guid>https://kodykantor.github.io/post/dockerbox/</guid>
      <description>&lt;p&gt;One of my favorite recent projects is my &lt;code&gt;dockerbox&lt;/code&gt; project. &lt;code&gt;dockerbox&lt;/code&gt; was a
fun little idea I had after having messed around with Docker for the last couple
years. &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt; is a few different things - a REST API
wrapper around container primitives in the kernel, a packaging mechanism for
binaries and their dependencies, a process manager, and a bunch of other stuff.&lt;/p&gt;

&lt;p&gt;I thoroughly enjoy spending most of my day in the Linux CLI. Something that
bothers me about Docker is that the CLI is sort-of like the Linux CLI.
Specifically, there&amp;rsquo;s a &lt;code&gt;docker ps&lt;/code&gt; command to list processes (containers), and
a &lt;code&gt;docker exec&lt;/code&gt; command to spawn a process inside of a running container.
&lt;code&gt;docker exec&lt;/code&gt; is a catch-all command, so you can run whatever CLI program you
want to inside of the spawned container. It&amp;rsquo;s really not hard to use the Docker
CLI. It has a very slight learning curve. Like most CLI programs, there&amp;rsquo;s a near
infinite number of commands and flags to control the program.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;dockerbox&lt;/code&gt; aims to provide the familiar Linux CLI to managing containers. If
I&amp;rsquo;m on Linux (or Unix) and I want to see my running processes, I can do
something like &lt;code&gt;ls /proc&lt;/code&gt;. That will list out the process IDs for running
processes, and I can drill down from there. Here&amp;rsquo;s something that you might see
on a Linux host:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ls /proc
1/  10/ 13/ 25/ 138/  139/  1130/
kmsg  interrupts  meminfo
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If I wanted to, I could run &lt;code&gt;ls /proc/1/&lt;/code&gt; to see information about process 1,
like open files, cgroup stuff, and more. &lt;code&gt;/proc&lt;/code&gt; is a virtual filesystem with a
&lt;a href=&#34;https://blogs.oracle.com/eschrock/entry/the_power_of_proc&#34;&gt;cool history&lt;/a&gt;.
&lt;code&gt;/proc&lt;/code&gt; may be getting a
&lt;a href=&#34;http://2016.texaslinuxfest.org/sites/default/files/slides/time-to-rethink-proc-160821145019.pdf&#34;&gt;rewrite&lt;/a&gt;
in future versions of Linux to fix some of the performance issues that are
appearing as a result of new tools like &lt;a href=&#34;https://criu.org/Main_Page&#34;&gt;CRIU&lt;/a&gt;. CRIU
in particular does a ton of open-read-close calls on the files in &lt;code&gt;/proc&lt;/code&gt;, which
are expensive operations. After taking into consideration that CRIU freezes
applications while it is running means that speed of collecting process
information is crucial to minimizing application downtime. With the changes
being suggested, &lt;code&gt;/proc&lt;/code&gt; may be going back to resemble its &lt;a href=&#34;http://lucasvr.gobolinux.org/etc/Killian84-Procfs-USENIX.pdf&#34;&gt;original
form&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;&lt;code&gt;dockerbox&lt;/code&gt; aims to provide similar functionality for containers. So like &lt;code&gt;/proc&lt;/code&gt;
but for container filesystems. If I were running &lt;code&gt;dockerbox&lt;/code&gt; on a machine, I could
do something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ls /containers
happy_hopper/ pensive_curran/ amazing_goldwasser/ admiring_kowalevski/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Each of the &amp;lsquo;directories&amp;rsquo; listed is a container. Running containers are colored
green, and stopped/exited containers are colored red. Since those are
directories, I can do something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ls /containers/happy_hopper/
bin/   dev/   etc/   home/  proc/  root/  sys/   tmp/   usr/   var/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The equivalent statement in Docker lingo is &lt;code&gt;docker exec -it happy_hopper ls /&lt;/code&gt;
which doesn&amp;rsquo;t exactly roll off the tongue, but is simple once you get over the
slight learning curve.&lt;/p&gt;

&lt;p&gt;A really annoying part of using containers for the test/dev cycle is that
containers&amp;hellip; contain! There isn&amp;rsquo;t a straightforward way to do things like copy
files from one container to another. With &lt;code&gt;dockerbox&lt;/code&gt;, it&amp;rsquo;s trivial!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ls /containers
happy_hopper/ pensive_curran/ amazing_goldwasser/ admiring_kowalevski/
$ cp /containers/happy_hopper/etc/fstab /containers/pensive_curran/tmp/other_fstab
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ok, so that example isn&amp;rsquo;t implemented, but it&amp;rsquo;s possible! The best thing about
the CLI is the possibility for an &lt;a href=&#34;https://www.princeton.edu/~hos/frs122/precis/mcilroy.htm&#34;&gt;orgy of
one-liners&lt;/a&gt;! With
&lt;code&gt;dockerbox&lt;/code&gt;, that can be a real possibility.&lt;/p&gt;

&lt;p&gt;Another thing that I wanted to implement was making this cluster-aware. Nobody
really talks about making something work manually on a single machine. There is
already some primitive multi-host usage in &lt;code&gt;dockerbox&lt;/code&gt;, but nothing great. It
would be cool if we could see something like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ls /containers
host1/  host2/  host3/
$ ls /containers/host1/
happy_hopper/ pensive_curran/ amazing_goldwasser/ admiring_kowalevski/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or better yet:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ls /containers
app1/ app2/ app3/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;but I don&amp;rsquo;t think application-blueprint-aware scheduling exists and would take
a long time to write.&lt;/p&gt;

&lt;p&gt;With &lt;code&gt;dockerbox&lt;/code&gt; in its current state, you can &lt;code&gt;cat&lt;/code&gt; files, &lt;code&gt;cd&lt;/code&gt; (but I had to
overwrite the &lt;code&gt;cc&lt;/code&gt; command because &lt;code&gt;cd&lt;/code&gt; is built into &lt;code&gt;bash&lt;/code&gt;), &lt;code&gt;ls&lt;/code&gt;, and some
other things. There&amp;rsquo;s a fallthrough mechanism built in, so some commands will
work out of the box (pun intended) without any code needing to be written to
support it. I overwrote &lt;code&gt;ls&lt;/code&gt; to do things like colorize running/stopped
containers. Generally anything dealing with the topmost layer of the virtual
filesystem (the &lt;code&gt;/containers&lt;/code&gt; namespace) would have to be overwritten because
&lt;code&gt;/containers&lt;/code&gt; doesn&amp;rsquo;t actually exist unless this would be written in the kernel.&lt;/p&gt;

&lt;p&gt;All of this is accomplished using the &lt;a href=&#34;https://docs.docker.com/engine/reference/api/docker_remote_api/&#34;&gt;Docker Remote
API&lt;/a&gt;. The code
is on &lt;a href=&#34;https://github.com/kodykantor/dockerbox&#34;&gt;GitHub&lt;/a&gt;. The bottom of the
README has a few other pie in the sky things as well. If it sounds interesting,
definitely check it out! It is definitely not good code, since it was hacked
together for a hackathon.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>android cr</title>
      <link>https://kodykantor.github.io/post/android-cr/</link>
      <pubDate>Tue, 17 Jan 2017 10:29:40 -0600</pubDate>
      
      <guid>https://kodykantor.github.io/post/android-cr/</guid>
      <description>&lt;p&gt;I got my first computer in 2004 for Christmas. It was some kind of Dell tower
with an awesome flat screen LCD display! It was given to me in the evening, but
for some reason I couldn&amp;rsquo;t set it up immediately and I had to wait until the
morning. When the morning came I got up, and in a flurry of excitement pulled
all of the parts out of the box and put it all together. It had a single core
Pentium IV processor, and a whopping 128MB of RAM, integrated graphics, and a
killer DVD drive. When I had it all put together I clicked the power button and
heard the fans start up. The lights on the tower came on, but nothing appeared
on the screen. I double checked that the screen was turned on, and hard-reset
the tower. Same thing. I think I stared at the blank flat screen monitor for a
solid ten minutes before giving up.&lt;/p&gt;

&lt;p&gt;I went to find my dad to help me figure out why the darn thing wasn&amp;rsquo;t working.
It turns out that I had neglected to connect the monitor to the tower! A silly
mistake that only a fifth grader would make!&lt;/p&gt;

&lt;p&gt;After a while my brother (who had an identical computer) decided to get a different
computer, so I took the RAM out of his and stuck it in mine. Math lovers will
note that I now had 256MB of RAM. I thought that was a lot back then! In 2011 I
bought parts to put together a computer, and bought 16GB of RAM for something
like 20 bucks. Now my phone has 2GB of RAM, and it seems like it&amp;rsquo;s always starved
for memory.&lt;/p&gt;

&lt;p&gt;Android, Windows Phone (if that&amp;rsquo;s still a thing), and iOS are all used pretty
much the same way. You can run one application in the foreground at any given
time, and the rest of your applications idle in the background, or are killed if
the system is starved for RAM. For me, it seems like applications are constantly
being killed to provide RAM for the process in the foreground. This makes
multitasking really cumbersome and difficult. As a result of the apps being killed,
I have to wait while they reload when I open them, and all of my session state
is missing. Is there any way to solve this problem?&lt;/p&gt;

&lt;p&gt;One of the things that I was involved in recently was working with some interns
on implementing live migration of bare-metal processes across machines. We used
a Linux tool called &lt;a href=&#34;https://criu.org/Main_Page&#34;&gt;CRIU&lt;/a&gt;(checkpoint/restore in userspace) which has the ability
to checkpoint and restore processes. Even though it&amp;rsquo;s called &amp;lsquo;&amp;hellip;in userspace,&amp;rsquo;
it has required a number of changes to the Linux kernel, like enabling the kernel
to track process memory changes, and a fork_with_pid() function that requests
a specific PID to be used for the new process. They&amp;rsquo;re also considering changing
the way &lt;code&gt;/proc&lt;/code&gt; is designed. &lt;code&gt;/proc&lt;/code&gt; is used very heavily during the C/R
process, so the overhead of opening/closing all of those files is quite large.
In the case of live migration, any slowdown in CRIU represents an increase in
the application downtime, which is not good.&lt;/p&gt;

&lt;p&gt;Most people think that C/R is only useful for live migration. That&amp;rsquo;s definitely
not the case! When I was thinking about my phone&amp;rsquo;s RAM problem, I
thought that it could be an interesting use case for C/R! Android runs on a
modified Linux kernel, so it may have the ability to run CRIU assuming the Android
maintainers are merging from upstream (which I believe they are).&lt;/p&gt;

&lt;p&gt;The question is, what can we do with C/R in Android? Let&amp;rsquo;s say that I just woke
up. I like to read the news, check my email, check my calendar, and then
maybe play a game (nothing like being lazy to start the day!). Maybe I
get a Snapchat notification while I&amp;rsquo;m playing this game. I switch to the Snapchat
application, reply to the snap, and then switch back to my game. When I switch back
to my game I have to completely restart because it was killed! Snapchat uses most
of the RAM on my device, and so does the game! I&amp;rsquo;m
frustrated now, so I switch back to Snapchat. It turns out that Snapchat was
killed while my game was starting! AHHHH! They can&amp;rsquo;t both be in memory, so now
I have this vicious cycle of frustration.&lt;/p&gt;

&lt;p&gt;C/R to the rescue? What if we could checkpoint an application (that we know uses
a lot of RAM) when it is taken out of the foreground? Then we don&amp;rsquo;t need to worry if it
gets killed. All of the state (including registers, TCP connections, memory, etc.)
is on the internal storage. We can use Snapchat all that we want. When we need to
go back to our game, the system issues a restore from storage. All of the pages
are mapped back into memory, and we&amp;rsquo;re off to the races! The game is EXACTLY where
we left it. While we&amp;rsquo;re playing the game, Snapchat is checkpointed so we can return
to that without having to wait through the agonizing startup routines again.&lt;/p&gt;

&lt;p&gt;Now let&amp;rsquo;s say that I was in the middle of beating a boss on my video game when
I get a phone call. The phone call forces my game to be checkpointed and killed.
Maybe the phone call was a nasty hacker and they used some weird key tone that
causes my phone to reboot. Damn it! I was JUST BEATING A BOSS. My phone reboots,
memory is wiped, and I frantically open the game. Luckily, the game was just
checkpointed, so it was restored to the point before I got the malicious phone call!
When I open up the game, I&amp;rsquo;m right back to where I was: in the middle of an
epic boss fight.&lt;/p&gt;

&lt;p&gt;There are a ton of problems with thinking this will work. TCP connections (if
any - I&amp;rsquo;m not sure that mobile apps maintain long TCP connections) will probably
be dropped by the server in the time between checkpoint and restore. Android is
hella fragmented, and that fragmentation goes all the way down to the kernel.
I&amp;rsquo;m pretty sure manufacturers NEVER update the kernel on their devices. So any
changes to fix or enhance the kernel features of CRIU would probably never be
sent out to phones.&lt;/p&gt;

&lt;p&gt;Luckily mobile applications don&amp;rsquo;t use much memory, so we shouldn&amp;rsquo;t have to worry
about copying many GBs of memory to storage when a checkpoint occurs. However,
phones also don&amp;rsquo;t usually have much extra storage. Another problem would be the
power usage. I&amp;rsquo;m guessing dumping memory isn&amp;rsquo;t the most efficient of tasks.&lt;/p&gt;

&lt;p&gt;There are some cool things about this. Applications could use more memory without
impacting other applications. Applications persist state across reboots. This
approach is pretty much only viable as a thought exercise because mobile users
only interact with one application at a time.&lt;/p&gt;

&lt;p&gt;Even though it isn&amp;rsquo;t more than a thought, it&amp;rsquo;s still fun to think about the use
cases of C/R on Android.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>worth two in the bush</title>
      <link>https://kodykantor.github.io/post/worth-two-in-the-bush/</link>
      <pubDate>Mon, 16 Jan 2017 17:19:11 -0600</pubDate>
      
      <guid>https://kodykantor.github.io/post/worth-two-in-the-bush/</guid>
      <description>&lt;p&gt;Idioms are some of my favorite literary constructs to think about. They can
contain so many meanings in a single sentence. I think of them as the English
equivalent of those hilarious &amp;lsquo;Chinese proverbs&amp;rsquo; that everyone&amp;rsquo;s dad always
dropped at Thanksgiving dinner.&lt;/p&gt;

&lt;p&gt;A lot of people who aren&amp;rsquo;t native English speakers don&amp;rsquo;t understand idioms.
Heck, even some Americans don&amp;rsquo;t understand idioms, but we still use them!
They&amp;rsquo;re fun, and they just roll off the tongue so easily. I work with some
non-native English speakers, and that leads me to think about idioms more than
the average American.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s think about a couple idioms. &amp;lsquo;A bird in the hand is worth two in the
bush.&amp;rsquo; That&amp;rsquo;s one that we all know. It means, to me, that something that is
possessed is worth twice as much as something that is not possessed. Possessing
50 dollars is worth the &lt;em&gt;possibility&lt;/em&gt; of possessing 100 dollars. Don&amp;rsquo;t take any
bets. Our tendency is to actually do the opposite. We tend to want to give up 50
dollars for a chance at 100 dollars. That&amp;rsquo;s why casinos and lotteries are in
business, right?&lt;/p&gt;

&lt;p&gt;This reminds me of a quote from one of the people I used to work with. &amp;lsquo;Running
code speaks louder than words.&amp;rsquo; Software engineers can be very successful
without writing any code. We all know these people. I call them &lt;em&gt;technology
hipsters&lt;/em&gt;. These are people who think that they have a monopoly on good ideas.
Nobody has a monopoly on good ideas. Nobody.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s do some math, beginning with an assumption (as all good math does :) ).
Let&amp;rsquo;s assume that everybody has one good idea every year. I&amp;rsquo;m talking real good
ideas, like &amp;lsquo;hey, feature X would be awesome,&amp;rsquo; or &amp;lsquo;if we had a tool that did Y,
it would make my life much easier.&amp;rsquo; My company, Veritas, has over 7k employees.
Let&amp;rsquo;s assume 1k of them are software engineers. The total number of ideas each
year is a simple function.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;yearly ideas = (total engineers) * (yearly good ideas per engineer)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we just do simple substitution with these sample numbers:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;yearly ideas = (1,000) * (1)
yearly ideas = 1,000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Whew. That was tough. So much math. Time to load back up on chili cheese Fritos.&lt;/p&gt;

&lt;p&gt;As you can see from that math, a TON of ideas are sitting in the heads of
engineers all the time. The best engineers are the ones who recognize when their
idea is good, flesh out their idea, and write the code. The technology hipsters
are the ones who have good ideas (just like the rest of us) but never intend to
execute. Technology hipsters are unfortunately very popular at traditional
top-down companies. These hipsters appeal to higher-ups with their knowledge of
buzz words, and willingness to lead whatever initiative would be spun up to take
on development of such an idea. Technology hipsters tend to trivialize problems
by throwing around buzz-wordy phrases like &amp;lsquo;We just need to do some machine
learning&amp;rsquo; without fully understanding the implications of doing such a thing
(because they don&amp;rsquo;t do implementation, remember?)&lt;/p&gt;

&lt;p&gt;So what does that mean in the context of our idiom? This:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&amp;lsquo;A bird in the hand is worth two in the bush&amp;rsquo; == &amp;lsquo;Running code speaks louder
than words&amp;rsquo;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The bird is the running code, and the two in the bush is the words.&lt;/p&gt;

&lt;p&gt;We are stuck with technology hipsters. There&amp;rsquo;s nothing we can do about that. We
can, however, do what engineers are supposed to do, which is write code. This
means that if you&amp;rsquo;re working on a hackathon project, write some code! It doesn&amp;rsquo;t
matter if the code only works on odd days of the month as long as your demo is
on an odd day of the month. Stopping at a PowerPoint presentation means the
death of your idea unless you want to become a technology hipster and work at a
top-down company.&lt;/p&gt;

&lt;p&gt;At a macro scale, software companies have to take chances. At some point they
have to stop maintaining something (a bird in the hand) and take a bet (two in
the bush) on building out a new offering. In that case, the company would prefer
two in the bush over a bird in the hand.&lt;/p&gt;

&lt;p&gt;This was very enlightening for me as a young engineer. I&amp;rsquo;m trying, as we all
should, to strive to be an implementor and not a technology hipster. It&amp;rsquo;s much
more difficult to write code than to make a PowerPoint presentation. There&amp;rsquo;s no
doubt about that.&lt;/p&gt;

&lt;p&gt;This blog will be my dumping ground for things that I&amp;rsquo;ve been thinking. This is
where I can be a technology hipster. I&amp;rsquo;ll write about a cool idea I have, and
maybe talk about running code from time to time. This is a magical place where
you can hear about birds in the hand, and those in the bush.&lt;/p&gt;

&lt;p&gt;edit: fixed a formatting issue&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>